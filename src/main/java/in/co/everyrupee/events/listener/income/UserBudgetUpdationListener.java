package in.co.everyrupee.events.listener.income;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.event.TransactionPhase;
import org.springframework.transaction.event.TransactionalEventListener;

import in.co.everyrupee.events.income.OnFetchCategoryTotalCompleteEvent;
import in.co.everyrupee.service.income.ICategoryService;
import in.co.everyrupee.service.income.IUserBudgetService;

/**
 * Asynchronously creates a budget for the user, removing itself from the
 * transaction of the caller method.
 * 
 * @author Nagarjun
 *
 */
@Async
@Component
public class UserBudgetUpdationListener implements IUserBudgetUpdationListener {

    @Autowired
    private IUserBudgetService userBudgetService;

    @Autowired
    private ICategoryService categoryService;

    Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * Annotations defined below are required to not propogate the transactions and
     * to create a new transaction for the listener.
     */
    @TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    @Override
    public void onApplicationEvent(final OnFetchCategoryTotalCompleteEvent event) {
	this.updateAutoGeneratedUserBudget(event);
    }

    /**
     * Save Auto generated budget
     */
    @Override
    public void updateAutoGeneratedUserBudget(final OnFetchCategoryTotalCompleteEvent event) {

	try {
	    Map<Integer, Double> categoryIdAndCategoryTotal = event.getCategoryIdAndTotalAmount();
	    String dateMeantFor = event.getDateMeantFor();

	    if (categoryIdAndCategoryTotal == null || dateMeantFor == null) {
		return;
	    }

	    userBudgetService.updateAutoGeneratedUserBudget(event.getFinancialPortfolioId(), categoryIdAndCategoryTotal,
		    dateMeantFor);

	} catch (Exception e) {
	    logger.error("Unable to create a budget for the category " + e);
	}
    }

}
