package in.co.everyrupee.service.income;

import static org.assertj.core.api.Assertions.assertThat;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Bean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;

import in.co.everyrupee.constants.income.DashboardConstants;
import in.co.everyrupee.pojo.income.UserBudget;
import in.co.everyrupee.repository.income.UserBudgetRepository;

@RunWith(SpringRunner.class)
@WithMockUser
public class UserBudgetServiceTest {

    @Autowired
    private UserBudgetService userBudgetService;

    @MockBean
    private UserBudgetRepository userBudgetRepository;

    Logger logger = LoggerFactory.getLogger(this.getClass());

    @TestConfiguration
    static class EmployeeServiceImplTestContextConfiguration {

	@Bean
	public UserBudgetService userBudgetService() {
	    return new UserBudgetService();
	}
    }

    @Before
    public void setUp() {
	UserBudget userBudget = new UserBudget();
	userBudget.setFinancialPortfolioId("19300000");
	userBudget.setCategoryId(3);
	userBudget.setPlanned(300);
	userBudget.setAutoGeneratedBudget(true);
	DateFormat format = new SimpleDateFormat(DashboardConstants.DATE_FORMAT, Locale.ENGLISH);
	Date date;
	try {
	    date = format.parse("01062019");
	    userBudget.setDateMeantFor(date);
	    List<UserBudget> userbudgetList = new ArrayList<UserBudget>();
	    userbudgetList.add(userBudget);

	    Mockito.when(userBudgetRepository.fetchAllUserBudget("19300000", date)).thenReturn(userbudgetList);

	} catch (ParseException e) {
	    logger.error(e + " Unable to add date to the user budget");
	}

    }

    /**
     * Test to return user budget with fetchAllUserBudget
     */
    @Test
    public void userBudgetRetrieveMock() {
	String financialPortfolioId = "19300000";
	String dateMeantFor = "01062019";
	List<UserBudget> found = userBudgetService.fetchAllUserBudget(financialPortfolioId, dateMeantFor);

	assertThat(found).isNotEmpty();
	assertThat(found.get(0).getFinancialPortfolioId()).isEqualTo("19300000");
	assertThat(found.get(0).getAutoGeneratedBudget()).isEqualTo(true);

	DateFormat format = new SimpleDateFormat(DashboardConstants.DATE_FORMAT, Locale.ENGLISH);
	Date date;
	try {
	    date = format.parse("01062019");
	    assertThat(found.get(0).getDateMeantFor()).isEqualTo(date);
	} catch (ParseException e) {
	    logger.error(e + " Unable to add date to the user budget");
	}
    }

    /**
     * Test to return auto generated user budget
     */
    @Test
    public void fetchAutoGeneratedUserBudgetByCategoryIds() {
	String financialPortfolioId = "19300000";
	String dateMeantFor = "01062019";
	String categoryId = "3";
	List<UserBudget> found = userBudgetService.fetchAutoGeneratedUserBudgetByCategoryIds(categoryId,
		financialPortfolioId, dateMeantFor);
	assertThat(found).isEmpty();

    }

}
