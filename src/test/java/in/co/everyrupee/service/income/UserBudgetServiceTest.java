package in.co.everyrupee.service.income;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Bean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import in.co.everyrupee.constants.income.DashboardConstants;
import in.co.everyrupee.exception.ResourceNotFoundException;
import in.co.everyrupee.pojo.income.UserBudget;
import in.co.everyrupee.repository.income.UserBudgetRepository;

@RunWith(SpringRunner.class)
@WithMockUser
public class UserBudgetServiceTest {

    @Autowired
    private UserBudgetService userBudgetService;

    @MockBean
    private UserBudgetRepository userBudgetRepository;

    Logger logger = LoggerFactory.getLogger(this.getClass());

    private Date dateMeantFor;

    private List<Integer> categoryIdList;

    private List<UserBudget> userBudgetList;

    private static final String FINANCIAL_PORTFOLIO_ID = "193000000";

    private static final String DATE_MEANT_FOR = "01062019";

    @TestConfiguration
    static class UserBudgetServiceImplTestContextConfiguration {

	@Bean
	public UserBudgetService userBudgetService() {
	    return new UserBudgetService();
	}
    }

    @Before
    public void setUp() {

	UserBudget userBudget = new UserBudget();
	userBudget.setFinancialPortfolioId(FINANCIAL_PORTFOLIO_ID);
	userBudget.setCategoryId(3);
	userBudget.setPlanned(300);
	userBudget.setAutoGeneratedBudget(true);
	DateFormat format = new SimpleDateFormat(DashboardConstants.DATE_FORMAT, Locale.ENGLISH);
	try {
	    setDateMeantFor(format.parse(DATE_MEANT_FOR));
	    userBudget.setDateMeantFor(getDateMeantFor());
	    setUserBudgetList(new ArrayList<UserBudget>());
	    getUserBudgetList().add(userBudget);

	    // Fetch all budget
	    Mockito.when(userBudgetRepository.fetchAllUserBudget(FINANCIAL_PORTFOLIO_ID, getDateMeantFor()))
		    .thenReturn(getUserBudgetList());

	    // Fetch budget with category id
	    List<Integer> categoryIdList = new ArrayList<Integer>();
	    categoryIdList.add(3);
	    Mockito.when(userBudgetRepository.fetchAutoGeneratedUserBudgetWithCategoryIds(categoryIdList,
		    FINANCIAL_PORTFOLIO_ID, getDateMeantFor())).thenReturn(getUserBudgetList());

	    UserBudget userBudgetSaved = new UserBudget();
	    userBudgetSaved.setFinancialPortfolioId(FINANCIAL_PORTFOLIO_ID);
	    userBudgetSaved.setCategoryId(3);
	    userBudgetSaved.setPlanned(600);
	    userBudgetSaved.setAutoGeneratedBudget(true);
	    Mockito.when(userBudgetRepository.save(userBudget)).thenReturn(userBudgetSaved);

	} catch (ParseException e) {
	    logger.error(e + " Unable to add date to the user budget");
	}

	// Set Category Id List
	setCategoryIdList(new ArrayList<Integer>());
	getCategoryIdList().add(3);
	getCategoryIdList().add(4);
	getCategoryIdList().add(5);
	getCategoryIdList().add(6);

    }

    /**
     * TEST: to return user budget with fetchAllUserBudget
     */
    @Test
    public void userBudgetRetrieveMock() {
	List<UserBudget> found = getUserBudgetService().fetchAllUserBudget(FINANCIAL_PORTFOLIO_ID, DATE_MEANT_FOR);

	assertThat(found).isNotEmpty();
	assertThat(found.get(0).getFinancialPortfolioId()).isEqualTo(FINANCIAL_PORTFOLIO_ID);
	assertThat(found.get(0).getAutoGeneratedBudget()).isEqualTo(true);

	DateFormat format = new SimpleDateFormat(DashboardConstants.DATE_FORMAT, Locale.ENGLISH);
	Date date;
	try {
	    date = format.parse(DATE_MEANT_FOR);
	    assertThat(found.get(0).getDateMeantFor()).isEqualTo(date);
	} catch (ParseException e) {
	    logger.error(e + " Unable to add date to the user budget");
	}
    }

    /**
     * TEST: to return auto generated user budget
     */
    @Test
    public void fetchAutoGeneratedUserBudgetByCategoryIds() {
	String categoryId = "3";
	List<UserBudget> found = getUserBudgetService().fetchAutoGeneratedUserBudgetByCategoryIds(categoryId,
		FINANCIAL_PORTFOLIO_ID, DATE_MEANT_FOR);
	assertThat(found).isNotEmpty();

    }

    /**
     * TEST: Save Auto Generated User Budget Without Amount (EXCEPTION)
     */
    @Test(expected = ResourceNotFoundException.class)
    public void saveAutoGeneratedUserBudgetException() {
	MultiValueMap<String, String> formData = new LinkedMultiValueMap<String, String>();

	formData.add(DashboardConstants.Budget.DATE_MEANT_FOR, DATE_MEANT_FOR);
	formData.add(DashboardConstants.Budget.FINANCIAL_PORTFOLIO_ID, FINANCIAL_PORTFOLIO_ID);
	formData.add(DashboardConstants.Budget.CATEGORY_ID, "3");

	getUserBudgetService().saveAutoGeneratedUserBudget(formData, FINANCIAL_PORTFOLIO_ID, true);

    }

    /**
     * TEST: Save Auto Generated User Budget With Amount with auto generated as
     * false
     */
    @Test
    public void saveAutoGeneratedUserBudgetNull() {
	MultiValueMap<String, String> formData = new LinkedMultiValueMap<String, String>();
	formData.add(DashboardConstants.Budget.PLANNED, "300");

	// Auto generation = false
	UserBudget userBudget = getUserBudgetService().saveAutoGeneratedUserBudget(formData, FINANCIAL_PORTFOLIO_ID,
		false);
	assertThat(userBudget).isNull();
    }

    /**
     * TEST: Save Auto Generated User Budget With Amount Normal Flow
     */
    @Test
    public void saveAutoGeneratedUserBudget() {
	MultiValueMap<String, String> formData = new LinkedMultiValueMap<String, String>();
	formData.add(DashboardConstants.Budget.PLANNED, "300");
	formData.add(DashboardConstants.Budget.DATE_MEANT_FOR, DATE_MEANT_FOR);
	formData.add(DashboardConstants.Budget.FINANCIAL_PORTFOLIO_ID, FINANCIAL_PORTFOLIO_ID);
	formData.add(DashboardConstants.Budget.CATEGORY_ID, "3");

	// Auto generation = false
	UserBudget userBudget = getUserBudgetService().saveAutoGeneratedUserBudget(formData, FINANCIAL_PORTFOLIO_ID,
		true);
	assertThat(userBudget).isNotNull();
	assertThat(userBudget.getPlanned()).isEqualTo(600);
    }

    /**
     * TEST: Delete auto generated user budget (Category ids are always numbers)
     */
    @Test(expected = NumberFormatException.class)
    public void deleteAutoGeneratedUserBudgetsException() {
	String categoryIds = "3,a6,7,9";

	getUserBudgetService().deleteAutoGeneratedUserBudgets(categoryIds, FINANCIAL_PORTFOLIO_ID, DATE_MEANT_FOR);

    }

    /**
     * TEST: Delete auto generated user budget
     */
    @Test
    public void deleteAutoGeneratedUserBudgets() {
	String categoryIds = "3,4,5,6";

	getUserBudgetService().deleteAutoGeneratedUserBudgets(categoryIds, FINANCIAL_PORTFOLIO_ID, DATE_MEANT_FOR);

	verify(getUserBudgetRepository(), times(1)).deleteAutoGeneratedUserBudgetWithCategoryIds(getCategoryIdList(),
		FINANCIAL_PORTFOLIO_ID, getDateMeantFor());

    }

    /**
     * TEST: Delete Auto Generated User Budget With Amount Normal Flow
     */
    @Test
    public void deleteAllUserBudgets() {

	getUserBudgetService().deleteAllUserBudgets(FINANCIAL_PORTFOLIO_ID, DATE_MEANT_FOR, true);

	verify(getUserBudgetRepository(), times(1)).deleteAllUserBudget(FINANCIAL_PORTFOLIO_ID, getDateMeantFor(),
		true);
    }

    private UserBudgetService getUserBudgetService() {
	return userBudgetService;
    }

    private UserBudgetRepository getUserBudgetRepository() {
	return userBudgetRepository;
    }

    private Date getDateMeantFor() {
	return dateMeantFor;
    }

    private void setDateMeantFor(Date dateMeantFor) {
	this.dateMeantFor = dateMeantFor;
    }

    private List<Integer> getCategoryIdList() {
	return categoryIdList;
    }

    private void setCategoryIdList(List<Integer> categoryIdList) {
	this.categoryIdList = categoryIdList;
    }

    private List<UserBudget> getUserBudgetList() {
	return userBudgetList;
    }

    private void setUserBudgetList(List<UserBudget> userBudgetList) {
	this.userBudgetList = userBudgetList;
    }

}
